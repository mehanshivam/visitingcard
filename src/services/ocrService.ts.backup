import { createWorker, Worker } from 'tesseract.js';
// Enhanced field parsers temporarily disabled due to compilation issues
// import { 
//   EmailParser, 
//   PhoneParser, 
//   NameParser, 
//   CompanyParser, 
//   TitleParser,
//   EnhancedContactData,
//   ParsedField 
// } from './fieldParsers';

export interface OCRResult {
  text: string;
  confidence: number;
  words: Array<{
    text: string;
    confidence: number;
    bbox: {
      x0: number;
      y0: number;
      x1: number;
      y1: number;
    };
  }>;
}

export interface LayoutAnalysis {
  topLines: Array<{text: string, bbox: any, score: number}>;      // Lines in top 1/3 of card
  middleLines: Array<{text: string, bbox: any, score: number}>;   // Lines in middle 1/3  
  bottomLines: Array<{text: string, bbox: any, score: number}>;   // Lines in bottom 1/3
  largestText: Array<{text: string, bbox: any, size: number}>;    // Biggest text (likely names)
  allLines: Array<{text: string, bbox: any, position: string}>;   // All text with position data
  cardHeight: number;
  cardWidth: number;
}

export interface ContactData {
  name?: string;
  title?: string;        // Job title/designation
  company?: string;
  phone?: string;
  email?: string;
  website?: string;
  address?: {           // Address components
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
    country?: string;
    full?: string;      // Complete address string
  };
  raw_text: string;
  confidence: number;
}

class OCRService {
  private worker: Worker | null = null;
  private isInitialized = false;

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // Mobile-optimized worker creation
      this.worker = await createWorker('eng');
      
      await this.worker.setParameters({
        tessedit_pageseg_mode: 6 as any, // Uniform block of text
        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@.-()+ ',
        // Mobile optimizations
        tessedit_ocr_engine_mode: 1 as any, // Neural nets LSTM engine only
      });
      this.isInitialized = true;
      console.log('OCR initialized successfully');
    } catch (error) {
      console.error('OCR initialization failed:', error);
      throw new Error(`Failed to initialize OCR: ${error}`);
    }
  }

  async processImage(imageData: string | File | HTMLCanvasElement | Blob): Promise<ContactData> {
    if (!this.worker || !this.isInitialized) {
      await this.initialize();
    }

    if (!this.worker) {
      throw new Error('OCR worker not initialized');
    }

    try {
      console.log('Starting OCR processing...');
      
      // Add timeout for mobile devices
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('OCR timeout - processing took too long')), 30000);
      });
      
      const ocrPromise = this.worker.recognize(imageData);
      const { data } = await Promise.race([ocrPromise, timeoutPromise]) as any;
      
      console.log('OCR completed, text length:', data.text.length);
      console.log('OCR confidence:', data.confidence);
      
      const ocrResult: OCRResult = {
        text: data.text,
        confidence: data.confidence,
        words: (data as any).words?.map((word: any) => ({
          text: word.text,
          confidence: word.confidence,
          bbox: word.bbox
        })) || []
      };

      // Use hybrid smart layout analysis
      return this.parseContactDataWithLayout(ocrResult);
    } catch (error) {
      console.error('OCR processing error:', error);
      throw new Error(`OCR processing failed: ${error}`);
    }
  }

  private parseContactDataWithLayout(ocrResult: OCRResult): ContactData {
    const text = ocrResult.text;
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    console.log('üß† Smart Layout Analysis starting...');
    
    try {
      // Step 1: Analyze visual layout using bounding boxes
      const layoutAnalysis = this.analyzeCardLayout(ocrResult);
      
      // Step 2: Use hybrid approach for field detection
      const contactData = this.detectFieldsWithLayout(layoutAnalysis, lines, text);
      
      console.log('üéØ Smart Layout Analysis completed');
      return contactData;
      
    } catch (error) {
      console.warn('Smart layout analysis failed, falling back to basic parsing:', error);
      return this.parseContactDataBasic(ocrResult);
    }
  }

  private analyzeCardLayout(ocrResult: OCRResult): LayoutAnalysis {
    const { words } = ocrResult;
    
    if (!words || words.length === 0) {
      throw new Error('No word data available for layout analysis');
    }

    // Calculate card dimensions from bounding boxes
    const allBboxes = words.map(w => w.bbox);
    const minX = Math.min(...allBboxes.map(b => b.x0));
    const maxX = Math.max(...allBboxes.map(b => b.x1));
    const minY = Math.min(...allBboxes.map(b => b.y0));
    const maxY = Math.max(...allBboxes.map(b => b.y1));
    
    const cardWidth = maxX - minX;
    const cardHeight = maxY - minY;
    
    console.log(`üìè Card dimensions: ${cardWidth}x${cardHeight}`);
    
    // Define vertical sections (thirds)
    const topThird = minY + (cardHeight / 3);
    const bottomThird = minY + (2 * cardHeight / 3);
    
    // Group words by position
    const topLines: Array<{text: string, bbox: any, score: number}> = [];
    const middleLines: Array<{text: string, bbox: any, score: number}> = [];
    const bottomLines: Array<{text: string, bbox: any, score: number}> = [];
    const allLines: Array<{text: string, bbox: any, position: string}> = [];
    
    // Calculate text sizes and group by position
    const largestText: Array<{text: string, bbox: any, size: number}> = [];
    
    words.forEach(word => {
      if (!word.text.trim()) return;
      
      const centerY = (word.bbox.y0 + word.bbox.y1) / 2;
      const textSize = word.bbox.y1 - word.bbox.y0;
      const score = word.confidence;
      
      // Position classification
      let position = 'middle';
      if (centerY <= topThird) {
        position = 'top';
        topLines.push({ text: word.text, bbox: word.bbox, score });
      } else if (centerY >= bottomThird) {
        position = 'bottom';
        bottomLines.push({ text: word.text, bbox: word.bbox, score });
      } else {
        middleLines.push({ text: word.text, bbox: word.bbox, score });
      }
      
      allLines.push({ text: word.text, bbox: word.bbox, position });
      largestText.push({ text: word.text, bbox: word.bbox, size: textSize });
    });
    
    // Sort by text size (largest first)
    largestText.sort((a, b) => b.size - a.size);
    
    console.log(`üìä Layout analysis: ${topLines.length} top, ${middleLines.length} middle, ${bottomLines.length} bottom`);
    
    return {
      topLines,
      middleLines, 
      bottomLines,
      largestText,
      allLines,
      cardHeight,
      cardWidth
    };
  }

  private cleanNameText(text: string): string {
    // Clean OCR artifacts and improve name quality
    let cleaned = text
      .replace(/[^A-Za-z\s]/g, '') // Remove non-letter characters
      .replace(/\s+/g, ' ') // Normalize whitespace
      .trim();
    
    // Capitalize first letter of each word
    cleaned = cleaned.split(' ')
      .filter(word => word.length > 0)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
    
    console.log(`üßπ Name cleaning: "${text}" ‚Üí "${cleaned}"`);
    return cleaned;
  }

  private cleanCompanyText(text: string): string {
    // Clean OCR artifacts while preserving business name structure
    let cleaned = text
      .replace(/[^\w\s&.,'-]/g, '') // Keep business-friendly characters
      .replace(/\s+/g, ' ') // Normalize whitespace
      .replace(/\b\d+\b/g, '') // Remove standalone numbers
      .replace(/\s+/g, ' ') // Clean up extra spaces after number removal
      .trim();
    
    // Basic capitalization for business names
    if (cleaned.length > 0) {
      cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);
    }
    
    console.log(`üßπ Company cleaning: "${text}" ‚Üí "${cleaned}"`);
    return cleaned;
  }

  private detectFieldsWithLayout(layoutAnalysis: LayoutAnalysis, lines: string[], text: string): ContactData {
    const contactData: ContactData = {
      raw_text: text,
      confidence: 75 // Default confidence for layout analysis
    };
    
    console.log('üéØ Smart field detection starting...');
    
    // Enhanced field detection using layout context
    this.detectNameWithLayout(contactData, layoutAnalysis);
    this.detectTitleWithLayout(contactData, layoutAnalysis);
    this.detectCompanyWithLayout(contactData, layoutAnalysis);
    this.detectContactInfoWithLayout(contactData, layoutAnalysis, text);
    this.detectAddressWithLayout(contactData, lines);
    
    console.log('‚úÖ Smart field detection completed');
    return contactData;
  }
  
  private detectNameWithLayout(contactData: ContactData, layout: LayoutAnalysis): void {
    // Names are typically in large text at the top or prominently displayed
    const candidates = layout.largestText.slice(0, 5); // Check more candidates
    const titleKeywords = ['ceo', 'cto', 'cfo', 'president', 'vp', 'director', 'manager', 'senior', 'lead'];
    
    // Try to combine fragmented name parts from top section
    const topCandidates = layout.topLines
      .filter(item => {
        const text = item.text.trim();
        return text.length >= 1 && 
               !text.includes('@') && 
               !/\d{3}/.test(text) &&
               /^[A-Za-z\s]+$/.test(text);
      })
      .sort((a, b) => a.bbox.x0 - b.bbox.x0); // Sort by horizontal position
    
    // Try to combine adjacent name fragments
    if (topCandidates.length >= 2) {
      let combinedName = '';
      for (let i = 0; i < Math.min(3, topCandidates.length); i++) {
        const fragment = topCandidates[i].text.trim();
        if (fragment.length >= 1) {
          combinedName += (combinedName ? ' ' : '') + fragment;
        }
      }
      
      // Clean and validate combined name
      const cleanedName = this.cleanNameText(combinedName);
      if (cleanedName.length >= 3 && cleanedName.split(' ').length >= 2) {
        contactData.name = cleanedName;
        console.log(`üë§ Name detected (combined fragments): ${cleanedName}`);
        return;
      }
    }
    
    // Fallback to individual candidates
    for (const candidate of candidates) {
      const text = candidate.text.trim();
      const lowerText = text.toLowerCase();
      
      // Skip if contains title keywords, emails, phones, or business terms
      if (titleKeywords.some(kw => lowerText.includes(kw)) ||
          text.includes('@') ||
          /\d{3}/.test(text) ||
          text.length < 2 || text.length > 50) {
        continue;
      }
      
      // Accept names with proper case patterns or reasonable text
      if (/^[A-Z][a-z]+ [A-Z][a-z]+/.test(text) || 
          (text.length >= 3 && /^[A-Za-z\s]+$/.test(text))) {
        const cleanedText = this.cleanNameText(text);
        if (cleanedText.length >= 3) {
          contactData.name = cleanedText;
          console.log(`üë§ Name detected (layout): ${cleanedText}`);
          break;
        }
      }
    }
  }
  
  private detectTitleWithLayout(contactData: ContactData, layout: LayoutAnalysis): void {
    const titleKeywords = [
      'ceo', 'cto', 'cfo', 'president', 'vice president', 'vp', 'director', 
      'manager', 'senior', 'lead', 'head', 'chief', 'principal', 'associate',
      'coordinator', 'specialist', 'analyst', 'consultant', 'engineer',
      'developer', 'designer', 'architect', 'supervisor', 'executive'
    ];
    
    // Check all lines for title keywords, prioritizing middle section
    const allCandidates = [...layout.middleLines, ...layout.topLines, ...layout.bottomLines];
    
    for (const candidate of allCandidates) {
      const text = candidate.text.trim();
      const lowerText = text.toLowerCase();
      
      if (titleKeywords.some(kw => lowerText.includes(kw)) &&
          text !== contactData.name &&
          !text.includes('@') &&
          text.length > 2 && text.length < 40) {
        contactData.title = text;
        console.log(`üíº Title detected (layout): ${text}`);
        break;
      }
    }
  }
  
  private detectCompanyWithLayout(contactData: ContactData, layout: LayoutAnalysis): void {
    const businessKeywords = ['llc', 'inc', 'corp', 'company', 'solutions', 'group', 'enterprises', 'ltd', 'limited'];
    const titleKeywords = ['ceo', 'cto', 'cfo', 'president', 'vp', 'director', 'manager'];
    
    // Priority 1: Look for business keywords across all sections
    const allCandidates = [...layout.topLines, ...layout.middleLines, ...layout.bottomLines];
    
    for (const candidate of allCandidates) {
      const text = candidate.text.trim();
      const lowerText = text.toLowerCase();
      
      if (businessKeywords.some(kw => lowerText.includes(kw)) &&
          text !== contactData.name &&
          text !== contactData.title &&
          !text.includes('@') &&
          !titleKeywords.some(kw => lowerText.includes(kw))) {
        contactData.company = text;
        console.log(`üè¢ Company detected (business keyword): ${text}`);
        return;
      }
    }
    
    // Priority 2: Try to combine company fragments from middle/top sections
    const companyCandidates = [...layout.topLines, ...layout.middleLines]
      .filter(item => {
        const text = item.text.trim();
        return text.length >= 2 && 
               text !== contactData.name &&
               !text.includes('@') && 
               !/\d{3}/.test(text) &&
               !titleKeywords.some(kw => text.toLowerCase().includes(kw));
      })
      .sort((a, b) => a.bbox.x0 - b.bbox.x0); // Sort by horizontal position
    
    // Try to combine company fragments
    if (companyCandidates.length >= 2) {
      let combinedCompany = '';
      for (let i = 0; i < Math.min(3, companyCandidates.length); i++) {
        const fragment = companyCandidates[i].text.trim();
        if (fragment.length >= 1) {
          combinedCompany += (combinedCompany ? ' ' : '') + fragment;
        }
      }
      
      // Clean and validate combined company
      const cleanedCompany = this.cleanCompanyText(combinedCompany);
      if (cleanedCompany.length >= 4 && cleanedCompany !== contactData.name) {
        contactData.company = cleanedCompany;
        console.log(`üè¢ Company detected (combined fragments): ${cleanedCompany}`);
        return;
      }
    }
    
    // Priority 3: Look for prominent text that could be company name
    const prominentCandidates = layout.largestText.slice(0, 5);
    
    for (const candidate of prominentCandidates) {
      const text = candidate.text.trim();
      const lowerText = text.toLowerCase();
      
      if (text !== contactData.name &&
          text !== contactData.title &&
          !text.includes('@') &&
          !/\d{3}/.test(text) &&
          !titleKeywords.some(kw => lowerText.includes(kw)) &&
          text.length > 1 && text.length < 60) {
        contactData.company = text;
        console.log(`üè¢ Company detected (prominent text): ${text}`);
        return;
      }
    }
  }
  
  private detectContactInfoWithLayout(contactData: ContactData, layout: LayoutAnalysis, text: string): void {
    // Email detection
    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
    const emailMatch = text.match(emailRegex);
    if (emailMatch) {
      contactData.email = emailMatch[0];
      console.log(`üìß Email detected: ${emailMatch[0]}`);
      
      // Derive website from email domain
      const domain = emailMatch[0].split('@')[1];
      contactData.website = `www.${domain}`;
    }
    
    // Phone detection - prioritize bottom section where contact info usually appears
    const phonePatterns = [
      /\+?1?[-.\s]?\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})/,
      /\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})/,
      /([0-9]{3})[-.]([0-9]{3})[-.]([0-9]{4})/
    ];
    
    const contactCandidates = [...layout.bottomLines, ...layout.middleLines];
    
    for (const pattern of phonePatterns) {
      for (const candidate of contactCandidates) {
        const phoneMatch = candidate.text.match(pattern);
        if (phoneMatch) {
          contactData.phone = phoneMatch[0].trim();
          console.log(`üìû Phone detected: ${phoneMatch[0]}`);
          return;
        }
      }
    }
  }
  
  private detectAddressWithLayout(contactData: ContactData, lines: string[]): void {
    // Reuse existing address detection logic
    const addressData = this.extractAddress(lines);
    if (addressData) {
      contactData.address = addressData;
      console.log(`üìç Address detected: ${addressData.full || 'partial'}`);
    }
  }

  private parseContactDataBasic(ocrResult: OCRResult): ContactData {
    const text = ocrResult.text;
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    console.log('Enhanced parsing with title and address support');
    
    const contactData: ContactData = {
      raw_text: text,
      confidence: ocrResult.confidence
    };

    // Basic email extraction
    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
    const emailMatch = text.match(emailRegex);
    if (emailMatch) {
      contactData.email = emailMatch[0];
    }

    // Basic phone extraction
    const phonePatterns = [
      /\+?1?[-.\s]?\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})/,
      /\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})/,
      /([0-9]{3})[-.]([0-9]{3})[-.]([0-9]{4})/
    ];
    
    for (const pattern of phonePatterns) {
      const phoneMatch = text.match(pattern);
      if (phoneMatch) {
        contactData.phone = phoneMatch[0].trim();
        break;
      }
    }

    // Basic website from email
    if (contactData.email) {
      const domain = contactData.email.split('@')[1];
      contactData.website = `www.${domain}`;
    }

    // Define keywords first for better detection
    const titleKeywords = [
      'ceo', 'cto', 'cfo', 'president', 'vice president', 'vp', 'director', 
      'manager', 'senior', 'lead', 'head', 'chief', 'principal', 'associate',
      'coordinator', 'specialist', 'analyst', 'consultant', 'engineer',
      'developer', 'designer', 'architect', 'supervisor', 'executive',
      'owner', 'founder', 'partner', 'sales', 'marketing', 'hr', 'admin'
    ];
    
    const businessKeywords = ['llc', 'inc', 'corp', 'company', 'solutions', 'group', 'enterprises', 'ltd', 'limited'];

    // Improved name detection - avoid titles and business terms
    if (lines.length > 0) {
      for (const line of lines) {
        const lowerLine = line.toLowerCase();
        const hasTitle = titleKeywords.some(keyword => lowerLine.includes(keyword));
        const hasBusiness = businessKeywords.some(keyword => lowerLine.includes(keyword));
        
        if (!line.includes('@') && 
            !line.match(/[0-9]{3}/) && 
            !hasTitle &&
            !hasBusiness &&
            line.length > 2 && 
            line.length < 50 &&
            /^[A-Za-z\s\-\.]+$/.test(line)) { // Only letters, spaces, hyphens, dots
          contactData.name = line;
          console.log(`Name detected: ${line}`);
          break;
        }
      }
    }

    // Enhanced job title detection
    for (const line of lines) {
      const lowerLine = line.toLowerCase();
      const hasTitle = titleKeywords.some(keyword => lowerLine.includes(keyword));
      
      if (hasTitle && 
          line !== contactData.name && 
          !line.includes('@') && 
          !line.match(/[0-9]{3}/) &&
          line.length > 2 && 
          line.length < 40) {
        contactData.title = line;
        console.log(`Title detected: ${line}`);
        break;
      }
    }

    // Enhanced company detection - prioritize business keywords over length
    for (const line of lines) {
      const lowerLine = line.toLowerCase();
      const hasBusinessKeyword = businessKeywords.some(keyword => lowerLine.includes(keyword));
      const hasTitle = titleKeywords.some(keyword => lowerLine.includes(keyword));
      
      // Priority 1: Lines with clear business keywords
      if (hasBusinessKeyword && 
          line !== contactData.name && 
          line !== contactData.title &&
          !line.includes('@') && 
          !line.match(/[0-9]{3}/) &&
          !hasTitle) {
        contactData.company = line;
        console.log(`Company detected (business keyword): ${line}`);
        break;
      }
    }
    
    // Priority 2: If no business keyword found, look for longer lines that aren't taglines
    if (!contactData.company) {
      for (const line of lines) {
        const lowerLine = line.toLowerCase();
        const hasTitle = titleKeywords.some(keyword => lowerLine.includes(keyword));
        const isShortTagline = line.length < 25 && (lowerLine.includes('innovative') || lowerLine.includes('leading') || lowerLine.includes('premier') || lowerLine.includes('solutions'));
        
        if (line !== contactData.name && 
            line !== contactData.title &&
            !line.includes('@') && 
            !line.match(/[0-9]{3}/) &&
            !hasTitle &&
            !isShortTagline &&
            line.length > 8 && 
            line.length < 60) {
          contactData.company = line;
          console.log(`Company detected (fallback): ${line}`);
          break;
        }
      }
    }

    // Address detection
    const addressData = this.extractAddress(lines);
    if (addressData) {
      contactData.address = addressData;
      console.log(`Address detected: ${addressData.full || 'partial'}`);
    }

    return contactData;
  }

  private extractAddress(lines: string[]): ContactData['address'] | null {
    // Common address patterns
    const zipPattern = /\b\d{5}(-\d{4})?\b/;
    const streetPatterns = [
      /\d+\s+[\w\s]+(?:street|st|avenue|ave|road|rd|drive|dr|lane|ln|boulevard|blvd|way|place|pl|court|ct)\b/i,
      /\d+\s+[\w\s]+\b/
    ];

    let address: ContactData['address'] = {};
    let addressLines: string[] = [];

    // Look for ZIP code first (most reliable indicator)
    for (const line of lines) {
      const zipMatch = line.match(zipPattern);
      if (zipMatch) {
        address.zip = zipMatch[0];
        
        // Extract city and state from the same line
        const beforeZip = line.substring(0, line.indexOf(zipMatch[0])).trim();
        const stateMatch = beforeZip.match(/([A-Z]{2})\s*$/);
        if (stateMatch) {
          address.state = stateMatch[1];
          const cityPart = beforeZip.substring(0, beforeZip.lastIndexOf(stateMatch[1])).trim();
          if (cityPart.endsWith(',')) {
            address.city = cityPart.slice(0, -1).trim();
          } else {
            address.city = cityPart;
          }
        }
        addressLines.push(line);
        break;
      }
    }

    // Look for street address
    for (const line of lines) {
      if (addressLines.includes(line)) continue;
      
      for (const pattern of streetPatterns) {
        if (pattern.test(line)) {
          address.street = line;
          addressLines.push(line);
          break;
        }
      }
      if (address.street) break;
    }

    // If we found any address components, create full address
    if (address.street || address.city || address.zip) {
      const fullParts: string[] = [];
      if (address.street) fullParts.push(address.street);
      if (address.city) {
        let cityState = address.city;
        if (address.state) cityState += `, ${address.state}`;
        if (address.zip) cityState += ` ${address.zip}`;
        fullParts.push(cityState);
      }
      address.full = fullParts.join(', ');
      
      return address;
    }

    return null;
  }

  async terminate(): Promise<void> {
    if (this.worker) {
      await this.worker.terminate();
      this.worker = null;
      this.isInitialized = false;
    }
  }

  getConfidenceThreshold(): number {
    return 60; // Minimum confidence level for reliable OCR
  }

  isHighConfidence(confidence: number): boolean {
    return confidence >= this.getConfidenceThreshold();
  }
}

// Export singleton instance
export const ocrService = new OCRService();
export default ocrService;